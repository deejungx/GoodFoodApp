@page "/admin/dish"

@using DataAccessLibrary
@using DataAccessLibrary.Models
@using GoodFood.Models
@using Oracle.ManagedDataAccess.Client

@inject IDishData Db
@inject MessageService Message

<Title Level="1">Dish Page</Title>

<Title Level="3" Style="margin-bottom: 1.2em;">Insert New Dish</Title>

<Form Model="@_newDish"
      OnFinish="InsertDish"
      OnFinishFailed="OnFinishFailed"
      LabelColSpan="2"
      WrapperColSpan="6">
    <FormItem Label="Code">
        <Input @bind-Value="@context.Code" />
    </FormItem>
    <FormItem Label="Name">
        <Input @bind-Value="@context.Name" />
    </FormItem>
    <FormItem WrapperColOffset="2" WrapperColSpan="6">
        <Button Type="@ButtonType.Primary" HtmlType="submit">
            Submit
        </Button>
    </FormItem>
</Form>

<Divider />

<Title Level="3">List of available dishes:</Title>

@if (_dish is null)
{
    <div class="spinning-center">
        <Spin />
    </div>
}
else
{
    {
        <Table TItem="DishModel"
               DataSource="@_dish"
               RowClassName="@(_=>"editable-row")">
            <Column @bind-Field="@context.Id">
                <a>@context.Id</a>
            </Column>
            <Column @bind-Field="@context.Code">
                @if (!_editCache[context.Id].edit)
                {
                    @context.Code
                }
                else
                {
                    <Input @bind-Value="_editCache[context.Id].data.Code" />
                }
            </Column>
            <Column @bind-Field="@context.Name">
                @if (!_editCache[context.Id].edit)
                {
                    @context.Name
                }
                else
                {
                    <Input @bind-Value="_editCache[context.Id].data.Name" />
                }
            </Column>
            <ActionColumn Title="Action">
                <Space>
                    @if (!_editCache[context.Id].edit)
                    {
                        <SpaceItem>
                            <Button @onclick="() => StartEdit(context.Id)" Type="primary">Edit</Button>
                        </SpaceItem>
                    }
                    else
                    {
                        <SpaceItem>
                            <Button @onclick="() => SaveEdit(context.Id)">Save</Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Popconfirm Title="Sure to cancel?"
                                        OnConfirm="() => CancelEdit(context.Id)"
                                        OkText="Yes"
                                        CancelText="No">
                                <Button>Cancel</Button>
                            </Popconfirm>
                        </SpaceItem>
                    }
                    <SpaceItem>
                        <Popconfirm Title="Confirm delete?"
                                    OnConfirm="() => DeleteRow(context)"
                                    OkText="Yes"
                                    CancelText="No">
                            <Button Type="primary" Danger>Delete</Button>
                        </Popconfirm>
                    </SpaceItem>
                </Space>
            </ActionColumn>
        </Table>
    }
}

@code {
    private List<DishModel> _dish;
    private DisplayDishModel _newDish = new DisplayDishModel();

    protected override async Task OnInitializedAsync()
    {
        _dish = await Db.GetDish();
        UpdateEditCache();
    }

    private async Task InsertDish()
    {
        var r = new Random();
        var newId = r.Next(10000);

        var d = new DishModel
        {
            Id = newId,
            Code = _newDish.Code,
            Name = _newDish.Name
        };

        try
        {
            await Db.InsertDish(d);

            _dish.Add(d);
            _newDish = new DisplayDishModel();
            await Message.Success("New Dish Added.");
        }
        catch (OracleException ex)
        {
            await Message.Error("Code must be unique. Try again.");

            Console.WriteLine(ex.Message);
        }

    }

    private async Task OnFinishFailed()
    {
        await Message.Error("Failed to add data.");
    }

    private async Task DeleteRow(DishModel d)
    {
        try
        {
            await Db.DeleteDish(d);
            _dish.Remove(d);
            await Message.Success("Item Removed.");
        }
        catch (OracleException ex)
        {
            await Message.Error("This data is referenced elsewhere. Unable to perform 'DELETE' operation.");

            Console.WriteLine(ex.Message);
        }
    }

    readonly IDictionary<int, (bool edit, DishModel data)> _editCache = new Dictionary<int, (bool edit, DishModel data)>();

    void StartEdit(int id)
    {
        var data = _editCache[id];
        data.edit = true;
        _editCache[id] = data;
    }

    void CancelEdit(int id)
    {
        var data = _dish.FirstOrDefault(item => item.Id == id);
        _editCache[id] = new(false, data);
    }

    private async Task SaveEdit(int id)
    {
        try
        {
            var data = _dish.FirstOrDefault(item => item.Id == id);
            await Db.SaveDish(data);
            _editCache[id] = new(false, data);
            await Message.Success("Success.");
        }
        catch (OracleException ex)
        {
            await Message.Error("Code already in use. Try again.");

            Console.WriteLine(ex.Message);
        }

    }

    void UpdateEditCache()
    {
        _dish.ForEach(item =>
        {
            _editCache[item.Id] = new(false, item);
        });
    }
}
