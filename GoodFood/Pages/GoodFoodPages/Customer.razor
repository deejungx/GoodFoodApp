@page "/admin/customer"

@using DataAccessLibrary
@using DataAccessLibrary.Models
@using Oracle.ManagedDataAccess.Client

@inject ICustomerData Db
@inject MessageService Message
@inject NavigationManager NavigationManager

<Title Level="1">Customer Page</Title>

<Button Type="primary" Shape="round" Icon="plus" Size="large" OnClick="NavigateToAddCustomer">
    New Customer
</Button>

<Divider />

<Title Level="3">List of current Customers:</Title>

@if (_customer is null)
{
    <div class="spinning-center">
        <Spin />
    </div>
}
else
{
    {
        <Table TItem="CustomerModel"
               DataSource="@_customer"
               RowClassName="@(_ => "editable-row")">
            <Column @bind-Field="@context.Id">
                <a>@context.Id</a>
            </Column>
            <Column @bind-Field="@context.Username" Sortable>
                @if (!_editCache[context.Id].edit)
                        {
                    @context.Username
                        }
                        else
                        {
                    <Input @bind-Value="_editCache[context.Id].data.Username" />
                        }
            </Column>
            <Column @bind-Field="@context.Phone">
                @if (!_editCache[context.Id].edit)
                {
                    @context.Phone
                }
                else
                {
                    <Input Type="number" @bind-Value="_editCache[context.Id].data.Phone" />
                }
            </Column>
            <Column @bind-Field="@context.Email">
                @if (!_editCache[context.Id].edit)
                {
                    @context.Email
                }
                else
                {
                    <Input Type="email" @bind-Value="_editCache[context.Id].data.Email" />
                }
            </Column>
            <Column @bind-Field="@context.RedeemedLoyalty" Sortable>
                @if (!_editCache[context.Id].edit)
                {
                    @context.RedeemedLoyalty
                }
                else
                {
                    <Input Type="number" @bind-Value="_editCache[context.Id].data.RedeemedLoyalty" />
                }
            </Column>
            <ActionColumn Title="Action">
                <Space>
                    @if (!_editCache[context.Id].edit)
                    {
                        <SpaceItem>
                            <Button @onclick="() => StartEdit(context.Id)" Type="primary">Edit</Button>
                        </SpaceItem>
                    }
                    else
                    {
                        <SpaceItem>
                            <Button @onclick="() => SaveEdit(context.Id)">Save</Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Popconfirm Title="Sure to cancel?"
                                        OnConfirm="() => CancelEdit(context.Id)"
                                        OkText="Yes"
                                        CancelText="No">
                                <Button>Cancel</Button>
                            </Popconfirm>
                        </SpaceItem>
                    }
                    <SpaceItem>
                        <Popconfirm Title="Confirm delete?"
                                    OnConfirm="() => DeleteRow(context)"
                                    OkText="Yes"
                                    CancelText="No">
                            <Button Type="primary" Danger>Delete</Button>
                        </Popconfirm>
                    </SpaceItem>
                </Space>
            </ActionColumn>
        </Table>
    }
}

@code {
    private List<CustomerModel> _customer;

    protected override async Task OnInitializedAsync()
    {
        _customer = await Db.GetCustomer();
        UpdateEditCache();
    }

    private void NavigateToAddCustomer()
    {
        NavigationManager.NavigateTo("/admin/customer/add");
    }

    private async Task DeleteRow(CustomerModel d)
    {
        try
        {
            await Db.DeleteCustomer(d);
            _customer.Remove(d);
            await Message.Success("Item Removed.");
        }
        catch (OracleException ex)
        {
            await Message.Error("This data is referenced elsewhere. Unable to perform 'DELETE' operation.");

            Console.WriteLine(ex.Message);
        }
    }

    readonly IDictionary<int, (bool edit, CustomerModel data)> _editCache = new Dictionary<int, (bool edit, CustomerModel data)>();

    void StartEdit(int id)
    {
        var data = _editCache[id];
        data.edit = true;
        _editCache[id] = data;
    }

    void CancelEdit(int id)
    {
        var data = _customer.FirstOrDefault(item => item.Id == id);
        _editCache[id] = new(false, data);
    }

    private async Task SaveEdit(int id)
    {
        try
        {
            var data = _customer.FirstOrDefault(item => item.Id == id);
            await Db.SaveCustomer(data);
            _editCache[id] = new(false, data);
            await Message.Success("Success.");
        }
        catch (OracleException ex)
        {
            await Message.Error("Username already taken. Try again.");

            Console.WriteLine(ex.Message);
        }

    }

    void UpdateEditCache()
    {
        _customer.ForEach(item =>
        {
            _editCache[item.Id] = new(false, item);
        });
    }
}
