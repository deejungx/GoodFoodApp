@page "/admin/loyalty/add"

@using GoodFood.Models
@using DataAccessLibrary
@using DataAccessLibrary.Models
@using Blazored.FluentValidation

@inject ILoyaltyPointsData Db
@inject IMenuItemData MenuDb
@inject MessageService Message


@if (_menuItems is null)
{
    <div class="spinning-center">
        <Spin />
    </div>
}
else
{
    <Title Level="1" Style="margin-bottom: 1.2em;">Add Loyalty point</Title>


    <div style="white-space: nowrap; margin-left: 40px; margin-bottom: 1.2em;">
        <label for="menuInput">Menu Item:</label>
        <Select @bind-Value="@_selectedMenuItem"
                DataSource="_menuItems"
                ValueName="@nameof(MenuItemModel.DisplayName)"
                LabelName="@nameof(MenuItemModel.DisplayName)"
                Style="width: 400px;"
                id="menuInput">
        </Select>
    </div>


    <Form @ref="_form"
          Model="@_newLoyaltyPoint"
          OnFinish="InsertLoyaltyPoint"
          OnFinishFailed="OnFinishFailed"
          LabelColSpan="2"
          WrapperColSpan="6"
          Style="margin-bottom: 1.2em;">

        <FluentValidationValidator />

        <FormItem Label="Points">
            <Input Type="number" @bind-Value="@context.Points" />
        </FormItem>
        
        <FormItem Label="Status">
            <Select @bind-Value="@context.Status"
                     DefaultValue="@("Active")"
                     TItemValue="string"
                     TItem="string">
                <SelectOptions>
                    <SelectOption TItemValue="string" TItem="string" Value="@("Active")" Label="Active" />
                    <SelectOption TItemValue="string" TItem="string" Value="@("Disabled")" Label="Disabled" />
                </SelectOptions>
            </Select>
        </FormItem>

        <FormItem Label="Active From">
            <DatePicker @bind-Value="@context.ActiveFrom" 
                         ShowTime="@true"
                         DefaultValue="new DateTime(2021, 03, 18, 10, 30, 0)" />
        </FormItem>

        <FormItem Label="Active Until">
            <DatePicker @bind-Value="@context.ActiveUntil"
                         ShowTime="@true"
                         DefaultValue="new DateTime(2021, 05, 18, 10, 30, 0)" />
        </FormItem>

        <FormItem WrapperColOffset="2" WrapperColSpan="6">
            <Button Type="@ButtonType.Primary" HtmlType="submit">
                Submit
            </Button>
        </FormItem>
    </Form>

}

@code {
    private readonly DisplayLoyaltyPointModel _newLoyaltyPoint = new DisplayLoyaltyPointModel();
    private Form<DisplayLoyaltyPointModel> _form;
    private string _selectedMenuItem;
    private List<MenuItemModel> _menuItems;

    protected override async Task OnInitializedAsync()
    {
        _menuItems = await MenuDb.GetAllMenuItems();
    }

    private async Task InsertLoyaltyPoint(EditContext editContext)
    {
        int dateCompare = DateTime.Compare(_newLoyaltyPoint.ActiveFrom, _newLoyaltyPoint.ActiveUntil);

        if (dateCompare >= 0)
        {
            await Message.Error("Active-From date must be earlier than Active-until date.");
        }
        else
        {
            var r = new Random();
            var newId = r.Next(10000);

            var loyaltyPoint = new LoyaltyPointsModel
            {
                Id = newId,
                Status = _newLoyaltyPoint.Status,
                Points = _newLoyaltyPoint.Points,
                ActiveFrom = _newLoyaltyPoint.ActiveFrom,
                ActiveUntil = _newLoyaltyPoint.ActiveUntil,
                MenuId = _menuItems.First(menu => menu.DisplayName == _selectedMenuItem).Id
            };
            await Db.InsertLoyaltyPoint(loyaltyPoint);
            await Message.Success("New Loyalty Point Added.");
            _form.Reset();
        }
    }

    private async Task OnFinishFailed(EditContext editContext)
    {
        await Message.Error("Failed to add data.");
    }

}